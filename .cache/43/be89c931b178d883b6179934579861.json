{"id":"node_modules/geotiff/dist-module/pool.js","dependencies":[{"name":"C:\\QGIS data\\web-mapping-application\\package.json","includedInParent":true,"mtime":1657357033911},{"name":"C:\\QGIS data\\web-mapping-application\\node_modules\\geotiff\\package.json","includedInParent":true,"mtime":1656981735220},{"name":"./compression/index.js","loc":{"line":1,"column":27,"index":27},"parent":"C:\\QGIS data\\web-mapping-application\\node_modules\\geotiff\\dist-module\\pool.js","resolved":"C:\\QGIS data\\web-mapping-application\\node_modules\\geotiff\\dist-module\\compression\\index.js"},{"name":"_bundle_loader","parent":"C:\\QGIS data\\web-mapping-application\\node_modules\\geotiff\\dist-module\\pool.js","resolved":"C:\\QGIS data\\web-mapping-application\\node_modules\\parcel-bundler\\src\\builtins\\bundle-loader.js"},{"name":"./worker/decoder.js","dynamic":true,"loc":{"line":49,"column":15,"index":2021},"parent":"C:\\QGIS data\\web-mapping-application\\node_modules\\geotiff\\dist-module\\pool.js","resolved":"C:\\QGIS data\\web-mapping-application\\node_modules\\geotiff\\dist-module\\worker\\decoder.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _index = require(\"./compression/index.js\");\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar defaultPoolSize = typeof navigator !== 'undefined' ? navigator.hardwareConcurrency || 2 : 2;\n/**\n * @module pool\n */\n\n/**\n * Pool for workers to decode chunks of the images.\n */\n\nvar Pool = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   * @param {Number} [size] The size of the pool. Defaults to the number of CPUs\n   *                      available. When this parameter is `null` or 0, then the\n   *                      decoding will be done in the main thread.\n   * @param {function(): Worker} [createWorker] A function that creates the decoder worker.\n   * Defaults to a worker with all decoders that ship with geotiff.js. The `createWorker()`\n   * function is expected to return a `Worker` compatible with Web Workers. For code that\n   * runs in Node, [web-worker](https://www.npmjs.com/package/web-worker) is a good choice.\n   *\n   * A worker that uses a custom lzw decoder would look like this `my-custom-worker.js` file:\n   * ```js\n   * import { addDecoder, getDecoder } from 'geotiff';\n   * addDecoder(5, () => import ('./my-custom-lzw').then((m) => m.default));\n   * self.addEventListener('message', async (e) => {\n   *   const { id, fileDirectory, buffer } = e.data;\n   *   const decoder = await getDecoder(fileDirectory);\n   *   const decoded = await decoder.decode(fileDirectory, buffer);\n   *   self.postMessage({ decoded, id }, [decoded]);\n   * });\n   * ```\n   * The way the above code is built into a worker by the `createWorker()` function\n   * depends on the used bundler. For most bundlers, something like this will work:\n   * ```js\n   * function createWorker() {\n   *   return new Worker(new URL('./my-custom-worker.js', import.meta.url));\n   * }\n   * ```\n   */\n  function Pool() {\n    var _this = this;\n\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultPoolSize;\n    var createWorker = arguments.length > 1 ? arguments[1] : undefined;\n\n    _classCallCheck(this, Pool);\n\n    this.workers = null;\n    this._awaitingDecoder = null;\n    this.size = size;\n    this.messageId = 0;\n\n    if (size) {\n      this._awaitingDecoder = createWorker ? Promise.resolve(createWorker) : new Promise(function (resolve) {\n        require(\"_bundle_loader\")(require.resolve('./worker/decoder.js')).then(function (module) {\n          resolve(module.create);\n        });\n      });\n\n      this._awaitingDecoder.then(function (create) {\n        _this._awaitingDecoder = null;\n        _this.workers = [];\n\n        for (var i = 0; i < size; i++) {\n          _this.workers.push({\n            worker: create(),\n            idle: true\n          });\n        }\n      });\n    }\n  }\n  /**\n   * Decode the given block of bytes with the set compression method.\n   * @param {ArrayBuffer} buffer the array buffer of bytes to decode.\n   * @returns {Promise<ArrayBuffer>} the decoded result as a `Promise`\n   */\n\n\n  _createClass(Pool, [{\n    key: \"decode\",\n    value: function () {\n      var _decode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(fileDirectory, buffer) {\n        var _this2 = this;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._awaitingDecoder) {\n                  _context.next = 3;\n                  break;\n                }\n\n                _context.next = 3;\n                return this._awaitingDecoder;\n\n              case 3:\n                return _context.abrupt(\"return\", this.size === 0 ? (0, _index.getDecoder)(fileDirectory).then(function (decoder) {\n                  return decoder.decode(fileDirectory, buffer);\n                }) : new Promise(function (resolve) {\n                  var worker = _this2.workers.find(function (candidate) {\n                    return candidate.idle;\n                  }) || _this2.workers[Math.floor(Math.random() * _this2.size)];\n\n                  worker.idle = false;\n                  var id = _this2.messageId++;\n\n                  var onMessage = function onMessage(e) {\n                    if (e.data.id === id) {\n                      worker.idle = true;\n                      resolve(e.data.decoded);\n                      worker.worker.removeEventListener('message', onMessage);\n                    }\n                  };\n\n                  worker.worker.addEventListener('message', onMessage);\n                  worker.worker.postMessage({\n                    fileDirectory: fileDirectory,\n                    buffer: buffer,\n                    id: id\n                  }, [buffer]);\n                }));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function decode(_x, _x2) {\n        return _decode.apply(this, arguments);\n      }\n\n      return decode;\n    }()\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.workers) {\n        this.workers.forEach(function (worker) {\n          worker.worker.terminate();\n        });\n        this.workers = null;\n      }\n    }\n  }]);\n\n  return Pool;\n}();\n\nvar _default = Pool;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":1,"column":0}},{"generated":{"line":12,"column":47},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":2,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":3,"column":0}},{"generated":{"line":24,"column":4},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":3,"column":6},"name":"defaultPoolSize"},{"generated":{"line":24,"column":19},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":3,"column":21}},{"generated":{"line":24,"column":22},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":3,"column":24}},{"generated":{"line":24,"column":29},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":3,"column":31},"name":"navigator"},{"generated":{"line":24,"column":38},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":3,"column":24}},{"generated":{"line":24,"column":43},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":3,"column":45}},{"generated":{"line":24,"column":54},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":3,"column":24}},{"generated":{"line":24,"column":57},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":3,"column":60},"name":"navigator"},{"generated":{"line":24,"column":66},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":3,"column":69}},{"generated":{"line":24,"column":67},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":3,"column":70},"name":"hardwareConcurrency"},{"generated":{"line":24,"column":86},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":3,"column":60}},{"generated":{"line":24,"column":90},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":3,"column":93}},{"generated":{"line":24,"column":91},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":3,"column":24}},{"generated":{"line":24,"column":94},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":3,"column":98}},{"generated":{"line":24,"column":95},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":3,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":5,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":6,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":7,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":9,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":10,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":11,"column":0}},{"generated":{"line":33,"column":4},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":12,"column":6},"name":"Pool"},{"generated":{"line":34,"column":2},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":13,"column":2}},{"generated":{"line":35,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":14,"column":0}},{"generated":{"line":36,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":15,"column":0}},{"generated":{"line":37,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":16,"column":0}},{"generated":{"line":38,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":17,"column":0}},{"generated":{"line":39,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":18,"column":0}},{"generated":{"line":40,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":19,"column":0}},{"generated":{"line":41,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":20,"column":0}},{"generated":{"line":42,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":21,"column":0}},{"generated":{"line":43,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":22,"column":0}},{"generated":{"line":44,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":23,"column":0}},{"generated":{"line":45,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":24,"column":0}},{"generated":{"line":46,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":25,"column":0}},{"generated":{"line":47,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":26,"column":0}},{"generated":{"line":48,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":27,"column":0}},{"generated":{"line":49,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":28,"column":0}},{"generated":{"line":50,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":29,"column":0}},{"generated":{"line":51,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":30,"column":0}},{"generated":{"line":52,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":31,"column":0}},{"generated":{"line":53,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":32,"column":0}},{"generated":{"line":54,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":33,"column":0}},{"generated":{"line":55,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":34,"column":0}},{"generated":{"line":56,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":35,"column":0}},{"generated":{"line":57,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":36,"column":0}},{"generated":{"line":58,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":37,"column":0}},{"generated":{"line":59,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":38,"column":0}},{"generated":{"line":60,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":39,"column":0}},{"generated":{"line":61,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":40,"column":0}},{"generated":{"line":62,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":41,"column":0}},{"generated":{"line":63,"column":2},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":42,"column":2}},{"generated":{"line":63,"column":18},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":42,"column":52}},{"generated":{"line":64,"column":4},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":42,"column":52}},{"generated":{"line":66,"column":4},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":42,"column":52}},{"generated":{"line":66,"column":8},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":42,"column":14},"name":"size"},{"generated":{"line":66,"column":12},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":42,"column":52}},{"generated":{"line":66,"column":83},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":42,"column":21},"name":"defaultPoolSize"},{"generated":{"line":66,"column":98},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":42,"column":52}},{"generated":{"line":67,"column":4},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":42,"column":52}},{"generated":{"line":67,"column":8},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":42,"column":38},"name":"createWorker"},{"generated":{"line":67,"column":20},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":42,"column":52}},{"generated":{"line":69,"column":4},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":42,"column":52}},{"generated":{"line":71,"column":4},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":43,"column":4}},{"generated":{"line":71,"column":9},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":43,"column":9},"name":"workers"},{"generated":{"line":71,"column":16},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":43,"column":4}},{"generated":{"line":71,"column":19},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":43,"column":19}},{"generated":{"line":71,"column":23},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":43,"column":4}},{"generated":{"line":72,"column":4},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":44,"column":4}},{"generated":{"line":72,"column":9},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":44,"column":9},"name":"_awaitingDecoder"},{"generated":{"line":72,"column":25},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":44,"column":4}},{"generated":{"line":72,"column":28},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":44,"column":28}},{"generated":{"line":72,"column":32},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":44,"column":4}},{"generated":{"line":73,"column":4},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":45,"column":4}},{"generated":{"line":73,"column":9},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":45,"column":9},"name":"size"},{"generated":{"line":73,"column":13},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":45,"column":4}},{"generated":{"line":73,"column":16},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":45,"column":16},"name":"size"},{"generated":{"line":73,"column":20},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":45,"column":4}},{"generated":{"line":74,"column":4},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":46,"column":4}},{"generated":{"line":74,"column":9},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":46,"column":9},"name":"messageId"},{"generated":{"line":74,"column":18},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":46,"column":4}},{"generated":{"line":74,"column":21},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":46,"column":21}},{"generated":{"line":74,"column":22},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":46,"column":4}},{"generated":{"line":76,"column":4},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":47,"column":4}},{"generated":{"line":76,"column":8},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":47,"column":8},"name":"size"},{"generated":{"line":76,"column":12},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":47,"column":4}},{"generated":{"line":76,"column":14},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":47,"column":14}},{"generated":{"line":77,"column":6},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":6}},{"generated":{"line":77,"column":11},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":11},"name":"_awaitingDecoder"},{"generated":{"line":77,"column":27},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":6}},{"generated":{"line":77,"column":30},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":30},"name":"createWorker"},{"generated":{"line":77,"column":42},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":42}},{"generated":{"line":77,"column":45},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":45},"name":"Promise"},{"generated":{"line":77,"column":52},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":52}},{"generated":{"line":77,"column":53},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":53},"name":"resolve"},{"generated":{"line":77,"column":60},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":45}},{"generated":{"line":77,"column":61},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":61},"name":"createWorker"},{"generated":{"line":77,"column":73},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":45}},{"generated":{"line":77,"column":74},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":42}},{"generated":{"line":77,"column":77},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":77}},{"generated":{"line":77,"column":81},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":81},"name":"Promise"},{"generated":{"line":77,"column":88},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":77}},{"generated":{"line":77,"column":89},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":89}},{"generated":{"line":77,"column":99},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":90},"name":"resolve"},{"generated":{"line":77,"column":106},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":89}},{"generated":{"line":77,"column":108},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":102}},{"generated":{"line":78,"column":8},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":49,"column":8}},{"generated":{"line":78,"column":50},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":49,"column":15}},{"generated":{"line":78,"column":71},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":49,"column":8}},{"generated":{"line":78,"column":74},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":49,"column":38},"name":"then"},{"generated":{"line":78,"column":78},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":49,"column":8}},{"generated":{"line":78,"column":79},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":49,"column":43}},{"generated":{"line":78,"column":89},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":49,"column":44},"name":"module"},{"generated":{"line":78,"column":95},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":49,"column":43}},{"generated":{"line":78,"column":97},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":49,"column":55}},{"generated":{"line":79,"column":10},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":50,"column":10},"name":"resolve"},{"generated":{"line":79,"column":17},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":50,"column":17}},{"generated":{"line":79,"column":18},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":50,"column":18},"name":"module"},{"generated":{"line":79,"column":24},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":50,"column":24}},{"generated":{"line":79,"column":25},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":50,"column":25},"name":"create"},{"generated":{"line":79,"column":31},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":50,"column":17}},{"generated":{"line":79,"column":32},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":50,"column":10}},{"generated":{"line":80,"column":8},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":51,"column":9}},{"generated":{"line":80,"column":9},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":49,"column":8}},{"generated":{"line":81,"column":6},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":52,"column":7}},{"generated":{"line":81,"column":7},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":77}},{"generated":{"line":81,"column":8},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":48,"column":6}},{"generated":{"line":83,"column":6},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":53,"column":6}},{"generated":{"line":83,"column":11},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":53,"column":11},"name":"_awaitingDecoder"},{"generated":{"line":83,"column":27},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":53,"column":6}},{"generated":{"line":83,"column":28},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":53,"column":28},"name":"then"},{"generated":{"line":83,"column":32},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":53,"column":6}},{"generated":{"line":83,"column":33},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":53,"column":33}},{"generated":{"line":83,"column":43},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":53,"column":34},"name":"create"},{"generated":{"line":83,"column":49},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":53,"column":33}},{"generated":{"line":83,"column":51},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":53,"column":45}},{"generated":{"line":84,"column":8},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":54,"column":8}},{"generated":{"line":84,"column":13},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":54,"column":12}},{"generated":{"line":84,"column":14},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":54,"column":13},"name":"_awaitingDecoder"},{"generated":{"line":84,"column":30},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":54,"column":8}},{"generated":{"line":84,"column":33},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":54,"column":32}},{"generated":{"line":84,"column":37},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":54,"column":8}},{"generated":{"line":85,"column":8},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":55,"column":8}},{"generated":{"line":85,"column":13},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":55,"column":12}},{"generated":{"line":85,"column":14},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":55,"column":13},"name":"workers"},{"generated":{"line":85,"column":21},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":55,"column":8}},{"generated":{"line":85,"column":24},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":55,"column":23}},{"generated":{"line":85,"column":26},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":55,"column":8}},{"generated":{"line":87,"column":8},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":56,"column":8}},{"generated":{"line":87,"column":13},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":56,"column":13}},{"generated":{"line":87,"column":17},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":56,"column":17},"name":"i"},{"generated":{"line":87,"column":18},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":56,"column":18}},{"generated":{"line":87,"column":21},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":56,"column":21}},{"generated":{"line":87,"column":22},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":56,"column":8}},{"generated":{"line":87,"column":24},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":56,"column":24},"name":"i"},{"generated":{"line":87,"column":25},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":56,"column":25}},{"generated":{"line":87,"column":28},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":56,"column":28},"name":"size"},{"generated":{"line":87,"column":32},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":56,"column":8}},{"generated":{"line":87,"column":34},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":56,"column":34},"name":"i"},{"generated":{"line":87,"column":35},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":56,"column":35}},{"generated":{"line":87,"column":37},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":56,"column":8}},{"generated":{"line":87,"column":39},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":56,"column":39}},{"generated":{"line":88,"column":10},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":57,"column":10}},{"generated":{"line":88,"column":15},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":57,"column":14}},{"generated":{"line":88,"column":16},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":57,"column":15},"name":"workers"},{"generated":{"line":88,"column":23},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":57,"column":10}},{"generated":{"line":88,"column":24},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":57,"column":23},"name":"push"},{"generated":{"line":88,"column":28},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":57,"column":10}},{"generated":{"line":88,"column":29},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":57,"column":28}},{"generated":{"line":89,"column":12},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":57,"column":30},"name":"worker"},{"generated":{"line":89,"column":18},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":57,"column":36}},{"generated":{"line":89,"column":20},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":57,"column":38},"name":"create"},{"generated":{"line":89,"column":26},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":57,"column":44}},{"generated":{"line":89,"column":28},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":57,"column":28}},{"generated":{"line":90,"column":12},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":57,"column":48},"name":"idle"},{"generated":{"line":90,"column":16},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":57,"column":52}},{"generated":{"line":90,"column":18},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":57,"column":54}},{"generated":{"line":91,"column":10},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":57,"column":28}},{"generated":{"line":91,"column":11},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":57,"column":10}},{"generated":{"line":92,"column":8},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":58,"column":9}},{"generated":{"line":93,"column":6},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":59,"column":7}},{"generated":{"line":93,"column":7},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":53,"column":6}},{"generated":{"line":94,"column":4},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":60,"column":5}},{"generated":{"line":95,"column":2},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":61,"column":3}},{"generated":{"line":96,"column":2},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":63,"column":2}},{"generated":{"line":97,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":64,"column":0}},{"generated":{"line":98,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":65,"column":0}},{"generated":{"line":99,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":66,"column":0}},{"generated":{"line":100,"column":0},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":67,"column":0}},{"generated":{"line":106,"column":79},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":106,"column":96},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":15},"name":"fileDirectory"},{"generated":{"line":106,"column":109},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":106,"column":111},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":30},"name":"buffer"},{"generated":{"line":106,"column":117},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":107,"column":8},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":109,"column":8},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":110,"column":10},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":111,"column":12},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":112,"column":14},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":113,"column":16},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":113,"column":21},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":69,"column":8}},{"generated":{"line":113,"column":26},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":69,"column":13},"name":"_awaitingDecoder"},{"generated":{"line":113,"column":42},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":114,"column":18},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":115,"column":18},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":116,"column":16},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":118,"column":16},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":119,"column":16},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":119,"column":23},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":70,"column":12}},{"generated":{"line":119,"column":28},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":70,"column":17},"name":"_awaitingDecoder"},{"generated":{"line":119,"column":44},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":121,"column":14},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":122,"column":16},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":122,"column":49},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":72,"column":11}},{"generated":{"line":122,"column":54},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":72,"column":16},"name":"size"},{"generated":{"line":122,"column":58},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":72,"column":11}},{"generated":{"line":122,"column":63},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":72,"column":25}},{"generated":{"line":122,"column":64},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":72,"column":11}},{"generated":{"line":122,"column":67},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":8}},{"generated":{"line":122,"column":71},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":8},"name":"getDecoder"},{"generated":{"line":122,"column":88},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":8}},{"generated":{"line":122,"column":90},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":19},"name":"fileDirectory"},{"generated":{"line":122,"column":103},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":8}},{"generated":{"line":122,"column":105},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":34},"name":"then"},{"generated":{"line":122,"column":109},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":8}},{"generated":{"line":122,"column":110},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":39}},{"generated":{"line":122,"column":120},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":40},"name":"decoder"},{"generated":{"line":122,"column":127},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":39}},{"generated":{"line":123,"column":18},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":39}},{"generated":{"line":123,"column":25},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":52},"name":"decoder"},{"generated":{"line":123,"column":32},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":59}},{"generated":{"line":123,"column":33},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":60},"name":"decode"},{"generated":{"line":123,"column":39},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":52}},{"generated":{"line":123,"column":40},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":67},"name":"fileDirectory"},{"generated":{"line":123,"column":53},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":52}},{"generated":{"line":123,"column":55},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":82},"name":"buffer"},{"generated":{"line":123,"column":61},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":52}},{"generated":{"line":123,"column":62},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":39}},{"generated":{"line":124,"column":16},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":39}},{"generated":{"line":124,"column":17},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":73,"column":8}},{"generated":{"line":124,"column":18},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":72,"column":11}},{"generated":{"line":124,"column":21},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":74,"column":8}},{"generated":{"line":124,"column":25},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":74,"column":12},"name":"Promise"},{"generated":{"line":124,"column":32},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":74,"column":8}},{"generated":{"line":124,"column":33},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":74,"column":20}},{"generated":{"line":124,"column":43},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":74,"column":21},"name":"resolve"},{"generated":{"line":124,"column":50},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":74,"column":20}},{"generated":{"line":124,"column":52},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":74,"column":33}},{"generated":{"line":125,"column":18},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":75,"column":8}},{"generated":{"line":125,"column":22},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":75,"column":14},"name":"worker"},{"generated":{"line":125,"column":28},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":75,"column":20}},{"generated":{"line":125,"column":31},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":75,"column":23}},{"generated":{"line":125,"column":37},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":75,"column":27}},{"generated":{"line":125,"column":38},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":75,"column":28},"name":"workers"},{"generated":{"line":125,"column":45},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":75,"column":23}},{"generated":{"line":125,"column":46},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":75,"column":36},"name":"find"},{"generated":{"line":125,"column":50},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":75,"column":23}},{"generated":{"line":125,"column":51},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":75,"column":41}},{"generated":{"line":125,"column":61},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":75,"column":42},"name":"candidate"},{"generated":{"line":125,"column":70},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":75,"column":41}},{"generated":{"line":126,"column":20},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":75,"column":41}},{"generated":{"line":126,"column":27},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":75,"column":56},"name":"candidate"},{"generated":{"line":126,"column":36},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":75,"column":65}},{"generated":{"line":126,"column":37},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":75,"column":66},"name":"idle"},{"generated":{"line":126,"column":41},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":75,"column":41}},{"generated":{"line":127,"column":18},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":75,"column":41}},{"generated":{"line":127,"column":19},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":75,"column":23}},{"generated":{"line":127,"column":24},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":76,"column":13}},{"generated":{"line":127,"column":30},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":76,"column":17}},{"generated":{"line":127,"column":31},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":76,"column":18},"name":"workers"},{"generated":{"line":127,"column":38},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":76,"column":13}},{"generated":{"line":127,"column":39},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":76,"column":26},"name":"Math"},{"generated":{"line":127,"column":43},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":76,"column":30}},{"generated":{"line":127,"column":44},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":76,"column":31},"name":"floor"},{"generated":{"line":127,"column":49},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":76,"column":26}},{"generated":{"line":127,"column":50},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":76,"column":37},"name":"Math"},{"generated":{"line":127,"column":54},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":76,"column":41}},{"generated":{"line":127,"column":55},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":76,"column":42},"name":"random"},{"generated":{"line":127,"column":61},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":76,"column":37}},{"generated":{"line":127,"column":66},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":76,"column":53}},{"generated":{"line":127,"column":72},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":76,"column":57}},{"generated":{"line":127,"column":73},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":76,"column":58},"name":"size"},{"generated":{"line":127,"column":77},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":76,"column":26}},{"generated":{"line":127,"column":78},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":76,"column":13}},{"generated":{"line":127,"column":79},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":75,"column":8}},{"generated":{"line":129,"column":18},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":77,"column":8},"name":"worker"},{"generated":{"line":129,"column":24},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":77,"column":14}},{"generated":{"line":129,"column":25},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":77,"column":15},"name":"idle"},{"generated":{"line":129,"column":29},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":77,"column":8}},{"generated":{"line":129,"column":32},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":77,"column":22}},{"generated":{"line":129,"column":37},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":77,"column":8}},{"generated":{"line":130,"column":18},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":78,"column":8}},{"generated":{"line":130,"column":22},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":78,"column":14},"name":"id"},{"generated":{"line":130,"column":24},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":78,"column":16}},{"generated":{"line":130,"column":27},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":78,"column":19}},{"generated":{"line":130,"column":33},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":78,"column":23}},{"generated":{"line":130,"column":34},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":78,"column":24},"name":"messageId"},{"generated":{"line":130,"column":43},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":78,"column":19}},{"generated":{"line":130,"column":45},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":78,"column":8}},{"generated":{"line":132,"column":18},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":79,"column":8}},{"generated":{"line":132,"column":22},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":79,"column":14},"name":"onMessage"},{"generated":{"line":132,"column":31},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":79,"column":23}},{"generated":{"line":132,"column":34},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":79,"column":26}},{"generated":{"line":132,"column":43},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":79,"column":14},"name":"onMessage"},{"generated":{"line":132,"column":52},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":79,"column":26}},{"generated":{"line":132,"column":53},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":79,"column":27},"name":"e"},{"generated":{"line":132,"column":54},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":79,"column":26}},{"generated":{"line":132,"column":56},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":79,"column":33}},{"generated":{"line":133,"column":20},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":80,"column":10}},{"generated":{"line":133,"column":24},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":80,"column":14},"name":"e"},{"generated":{"line":133,"column":25},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":80,"column":15}},{"generated":{"line":133,"column":26},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":80,"column":16},"name":"data"},{"generated":{"line":133,"column":30},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":80,"column":14}},{"generated":{"line":133,"column":31},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":80,"column":21},"name":"id"},{"generated":{"line":133,"column":33},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":80,"column":14}},{"generated":{"line":133,"column":38},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":80,"column":28},"name":"id"},{"generated":{"line":133,"column":40},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":80,"column":10}},{"generated":{"line":133,"column":42},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":80,"column":32}},{"generated":{"line":134,"column":22},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":81,"column":12},"name":"worker"},{"generated":{"line":134,"column":28},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":81,"column":18}},{"generated":{"line":134,"column":29},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":81,"column":19},"name":"idle"},{"generated":{"line":134,"column":33},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":81,"column":12}},{"generated":{"line":134,"column":36},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":81,"column":26}},{"generated":{"line":134,"column":40},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":81,"column":12}},{"generated":{"line":135,"column":22},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":82,"column":12},"name":"resolve"},{"generated":{"line":135,"column":29},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":82,"column":19}},{"generated":{"line":135,"column":30},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":82,"column":20},"name":"e"},{"generated":{"line":135,"column":31},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":82,"column":21}},{"generated":{"line":135,"column":32},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":82,"column":22},"name":"data"},{"generated":{"line":135,"column":36},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":82,"column":20}},{"generated":{"line":135,"column":37},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":82,"column":27},"name":"decoded"},{"generated":{"line":135,"column":44},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":82,"column":19}},{"generated":{"line":135,"column":45},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":82,"column":12}},{"generated":{"line":136,"column":22},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":83,"column":12},"name":"worker"},{"generated":{"line":136,"column":28},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":83,"column":18}},{"generated":{"line":136,"column":29},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":83,"column":19},"name":"worker"},{"generated":{"line":136,"column":35},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":83,"column":12}},{"generated":{"line":136,"column":36},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":83,"column":26},"name":"removeEventListener"},{"generated":{"line":136,"column":55},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":83,"column":12}},{"generated":{"line":136,"column":56},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":83,"column":46}},{"generated":{"line":136,"column":65},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":83,"column":12}},{"generated":{"line":136,"column":67},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":83,"column":57},"name":"onMessage"},{"generated":{"line":136,"column":76},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":83,"column":12}},{"generated":{"line":137,"column":20},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":84,"column":11}},{"generated":{"line":138,"column":18},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":85,"column":9}},{"generated":{"line":138,"column":19},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":79,"column":8}},{"generated":{"line":140,"column":18},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":86,"column":8},"name":"worker"},{"generated":{"line":140,"column":24},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":86,"column":14}},{"generated":{"line":140,"column":25},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":86,"column":15},"name":"worker"},{"generated":{"line":140,"column":31},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":86,"column":8}},{"generated":{"line":140,"column":32},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":86,"column":22},"name":"addEventListener"},{"generated":{"line":140,"column":48},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":86,"column":8}},{"generated":{"line":140,"column":49},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":86,"column":39}},{"generated":{"line":140,"column":58},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":86,"column":8}},{"generated":{"line":140,"column":60},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":86,"column":50},"name":"onMessage"},{"generated":{"line":140,"column":69},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":86,"column":8}},{"generated":{"line":141,"column":18},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":8},"name":"worker"},{"generated":{"line":141,"column":24},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":14}},{"generated":{"line":141,"column":25},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":15},"name":"worker"},{"generated":{"line":141,"column":31},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":8}},{"generated":{"line":141,"column":32},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":22},"name":"postMessage"},{"generated":{"line":141,"column":43},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":8}},{"generated":{"line":141,"column":44},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":34}},{"generated":{"line":142,"column":20},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":36},"name":"fileDirectory"},{"generated":{"line":142,"column":33},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":49}},{"generated":{"line":142,"column":35},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":36},"name":"fileDirectory"},{"generated":{"line":142,"column":48},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":34}},{"generated":{"line":143,"column":20},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":51},"name":"buffer"},{"generated":{"line":143,"column":26},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":57}},{"generated":{"line":143,"column":28},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":51},"name":"buffer"},{"generated":{"line":143,"column":34},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":34}},{"generated":{"line":144,"column":20},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":59},"name":"id"},{"generated":{"line":144,"column":22},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":61}},{"generated":{"line":144,"column":24},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":59},"name":"id"},{"generated":{"line":145,"column":18},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":34}},{"generated":{"line":145,"column":19},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":8}},{"generated":{"line":145,"column":21},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":65}},{"generated":{"line":145,"column":22},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":66},"name":"buffer"},{"generated":{"line":145,"column":28},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":65}},{"generated":{"line":145,"column":29},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":87,"column":8}},{"generated":{"line":146,"column":16},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":88,"column":7}},{"generated":{"line":146,"column":17},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":74,"column":8}},{"generated":{"line":146,"column":18},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":148,"column":14},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":149,"column":14},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":150,"column":16},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":151,"column":12},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":152,"column":10},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":153,"column":8},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":154,"column":6},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":68,"column":2}},{"generated":{"line":164,"column":11},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":91,"column":2}},{"generated":{"line":164,"column":30},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":91,"column":12}},{"generated":{"line":165,"column":6},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":92,"column":4}},{"generated":{"line":165,"column":10},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":92,"column":8}},{"generated":{"line":165,"column":15},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":92,"column":13},"name":"workers"},{"generated":{"line":165,"column":22},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":92,"column":4}},{"generated":{"line":165,"column":24},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":92,"column":22}},{"generated":{"line":166,"column":8},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":93,"column":6}},{"generated":{"line":166,"column":13},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":93,"column":11},"name":"workers"},{"generated":{"line":166,"column":20},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":93,"column":6}},{"generated":{"line":166,"column":21},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":93,"column":19},"name":"forEach"},{"generated":{"line":166,"column":28},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":93,"column":6}},{"generated":{"line":166,"column":29},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":93,"column":27}},{"generated":{"line":166,"column":39},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":93,"column":28},"name":"worker"},{"generated":{"line":166,"column":45},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":93,"column":27}},{"generated":{"line":166,"column":47},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":93,"column":39}},{"generated":{"line":167,"column":10},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":94,"column":8},"name":"worker"},{"generated":{"line":167,"column":16},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":94,"column":14}},{"generated":{"line":167,"column":17},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":94,"column":15},"name":"worker"},{"generated":{"line":167,"column":23},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":94,"column":8}},{"generated":{"line":167,"column":24},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":94,"column":22},"name":"terminate"},{"generated":{"line":167,"column":33},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":94,"column":8}},{"generated":{"line":168,"column":8},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":95,"column":7}},{"generated":{"line":168,"column":9},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":93,"column":6}},{"generated":{"line":169,"column":8},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":96,"column":6}},{"generated":{"line":169,"column":13},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":96,"column":11},"name":"workers"},{"generated":{"line":169,"column":20},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":96,"column":6}},{"generated":{"line":169,"column":23},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":96,"column":21}},{"generated":{"line":169,"column":27},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":96,"column":6}},{"generated":{"line":170,"column":6},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":97,"column":5}},{"generated":{"line":171,"column":4},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":98,"column":3}},{"generated":{"line":177,"column":15},"source":"node_modules/geotiff/dist-module/pool.js","original":{"line":101,"column":15},"name":"Pool"}],"sources":{"node_modules/geotiff/dist-module/pool.js":"import { getDecoder } from './compression/index.js';\n\nconst defaultPoolSize = typeof navigator !== 'undefined' ? (navigator.hardwareConcurrency || 2) : 2;\n\n/**\n * @module pool\n */\n\n/**\n * Pool for workers to decode chunks of the images.\n */\nclass Pool {\n  /**\n   * @constructor\n   * @param {Number} [size] The size of the pool. Defaults to the number of CPUs\n   *                      available. When this parameter is `null` or 0, then the\n   *                      decoding will be done in the main thread.\n   * @param {function(): Worker} [createWorker] A function that creates the decoder worker.\n   * Defaults to a worker with all decoders that ship with geotiff.js. The `createWorker()`\n   * function is expected to return a `Worker` compatible with Web Workers. For code that\n   * runs in Node, [web-worker](https://www.npmjs.com/package/web-worker) is a good choice.\n   *\n   * A worker that uses a custom lzw decoder would look like this `my-custom-worker.js` file:\n   * ```js\n   * import { addDecoder, getDecoder } from 'geotiff';\n   * addDecoder(5, () => import ('./my-custom-lzw').then((m) => m.default));\n   * self.addEventListener('message', async (e) => {\n   *   const { id, fileDirectory, buffer } = e.data;\n   *   const decoder = await getDecoder(fileDirectory);\n   *   const decoded = await decoder.decode(fileDirectory, buffer);\n   *   self.postMessage({ decoded, id }, [decoded]);\n   * });\n   * ```\n   * The way the above code is built into a worker by the `createWorker()` function\n   * depends on the used bundler. For most bundlers, something like this will work:\n   * ```js\n   * function createWorker() {\n   *   return new Worker(new URL('./my-custom-worker.js', import.meta.url));\n   * }\n   * ```\n   */\n  constructor(size = defaultPoolSize, createWorker) {\n    this.workers = null;\n    this._awaitingDecoder = null;\n    this.size = size;\n    this.messageId = 0;\n    if (size) {\n      this._awaitingDecoder = createWorker ? Promise.resolve(createWorker) : new Promise((resolve) => {\n        import('./worker/decoder.js').then((module) => {\n          resolve(module.create);\n        });\n      });\n      this._awaitingDecoder.then((create) => {\n        this._awaitingDecoder = null;\n        this.workers = [];\n        for (let i = 0; i < size; i++) {\n          this.workers.push({ worker: create(), idle: true });\n        }\n      });\n    }\n  }\n\n  /**\n   * Decode the given block of bytes with the set compression method.\n   * @param {ArrayBuffer} buffer the array buffer of bytes to decode.\n   * @returns {Promise<ArrayBuffer>} the decoded result as a `Promise`\n   */\n  async decode(fileDirectory, buffer) {\n    if (this._awaitingDecoder) {\n      await this._awaitingDecoder;\n    }\n    return this.size === 0\n      ? getDecoder(fileDirectory).then((decoder) => decoder.decode(fileDirectory, buffer))\n      : new Promise((resolve) => {\n        const worker = this.workers.find((candidate) => candidate.idle)\n          || this.workers[Math.floor(Math.random() * this.size)];\n        worker.idle = false;\n        const id = this.messageId++;\n        const onMessage = (e) => {\n          if (e.data.id === id) {\n            worker.idle = true;\n            resolve(e.data.decoded);\n            worker.worker.removeEventListener('message', onMessage);\n          }\n        };\n        worker.worker.addEventListener('message', onMessage);\n        worker.worker.postMessage({ fileDirectory, buffer, id }, [buffer]);\n      });\n  }\n\n  destroy() {\n    if (this.workers) {\n      this.workers.forEach((worker) => {\n        worker.worker.terminate();\n      });\n      this.workers = null;\n    }\n  }\n}\n\nexport default Pool;\n"},"lineCount":null}},"error":null,"hash":"2ac9295466a89bb704eebca7f079c29e","cacheData":{"env":{}}}