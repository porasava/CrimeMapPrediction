{"version":3,"sources":["lib/L.Geoserver.js"],"names":["L","Geoserver","FeatureGroup","extend","options","layers","format","transparent","CQL_FILTER","zIndex","version","srsname","attribution","fitLayer","style","onEachFeature","feature","layer","wmsLayers","wmsCQL_FILTER","wmsStyle","width","height","initialize","baseLayerUrl","setOptions","_layers","state","exist","wms","tileLayer","wfs","that","$","ajax","type","data","service","request","typename","outputFormat","format_options","dataType","jsonpCallback","success","i","features","length","GeoJSON","geometryToLayer","push","addLayer","setStyle","_map","fitBounds","getBounds","fail","jqXHR","textStatus","error","console","log","legend","control","position","onAdd","map","div","DomUtil","create","url","innerHTML","wmsImage","selectedArea","geoJson","bboxX1","_southWest","lng","bboxX2","_northEast","bboxY1","lat","bboxY2","bboxList","bufferBbox","Math","min","maxValue","max","otherLayers","otherStyle","otherCqlFilter","wmsLayerURL","wmsId","attr","req"],"mappings":"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","file":"L.Geoserver.68035627.js","sourceRoot":"..","sourcesContent":["L.Geoserver = L.FeatureGroup.extend({\r\n  //Some of the default options\r\n  options: {\r\n    layers: \"\",\r\n    format: \"image/png\",\r\n    transparent: true,\r\n    CQL_FILTER: \"INCLUDE\",\r\n    zIndex: 1000,\r\n    version: \"1.1.0\",\r\n    srsname: \"EPSG:4326\",\r\n    attribution: `layer`,\r\n    fitLayer: true,\r\n    style: \"\",\r\n    onEachFeature: function (feature, layer) {},\r\n    wmsLayers: [],\r\n    wmsCQL_FILTER: [],\r\n    wmsStyle: [],\r\n    width: 500,\r\n    height: 500,\r\n  },\r\n\r\n  // constructor function\r\n  initialize: function (baseLayerUrl, options) {\r\n    this.baseLayerUrl = baseLayerUrl;\r\n\r\n    L.setOptions(this, options);\r\n\r\n    this._layers = {};\r\n\r\n    this.state = {\r\n      exist: \"exist\",\r\n    };\r\n  },\r\n\r\n  //wms layer function\r\n  wms: function () {\r\n    return L.tileLayer.wms(this.baseLayerUrl, this.options);\r\n  },\r\n\r\n  //wfs layer fetching function\r\n  //Note this function will work only for vector layer\r\n  wfs: function () {\r\n    var that = this;\r\n\r\n    //Geoserver Web Feature Service\r\n    $.ajax(this.baseLayerUrl, {\r\n      type: \"GET\",\r\n\r\n      data: {\r\n        service: \"WFS\",\r\n        version: \"1.1.0\",\r\n        request: \"GetFeature\",\r\n        typename: this.options.layers,\r\n        CQL_FILTER: this.options.CQL_FILTER,\r\n        srsname: this.options.srsname,\r\n        outputFormat: \"text/javascript\",\r\n        format_options: \"callback: getJson\",\r\n      },\r\n\r\n      dataType: \"jsonp\",\r\n      jsonpCallback: \"getJson\",\r\n      success: function (data) {\r\n        var layers = [];\r\n\r\n        // push all the layers to the layers array\r\n        for (var i = 0; i < data.features.length; i++) {\r\n          var layer = L.GeoJSON.geometryToLayer(\r\n            data.features[i],\r\n            that.options || null\r\n          );\r\n\r\n          layer.feature = data.features[i];\r\n          layer.options.onEachFeature = that.options.onEachFeature(\r\n            layer.feature,\r\n            layer\r\n          );\r\n\r\n          layers.push(layer);\r\n        }\r\n\r\n        // for adding styles to the geojson feature\r\n        if (typeof that.options.style === \"function\") {\r\n          for (i = 0; i < layers.length; i++) {\r\n            that.addLayer(layers[i]);\r\n            if (i.setStyle) {\r\n              i.setStyle(that.options.style(i.feature));\r\n            }\r\n          }\r\n        } else {\r\n          for (i = 0; i < layers.length; i++) {\r\n            that.addLayer(layers[i]);\r\n            that.setStyle(that.options.style);\r\n          }\r\n        }\r\n\r\n        if (that.options.fitLayer) {\r\n          that._map.fitBounds(that.getBounds());\r\n        }\r\n      },\r\n    }).fail(function (jqXHR, textStatus, error) {\r\n      console.log(jqXHR, textStatus, error);\r\n    });\r\n\r\n    return that;\r\n  },\r\n\r\n  //Legend of the map\r\n  legend: function () {\r\n    var that = this;\r\n    var legend = L.control({ position: \"bottomleft\" });\r\n    legend.onAdd = function (map) {\r\n      var div = L.DomUtil.create(\"div\", \"info Legend\");\r\n      var url = `${that.baseLayerUrl}/wms?REQUEST=GetLegendGraphic&VERSION=1.1.0&FORMAT=image/png&LAYER=${that.options.layers}&style=${that.options.style}`;\r\n      div.innerHTML +=\r\n        \"<img src=\" +\r\n        url +\r\n        ' alt=\"legend\" data-toggle=\"tooltip\" title=\"Map legend\">';\r\n      return div;\r\n    };\r\n    return legend;\r\n  },\r\n\r\n  //This function is used for zooming the raster layer using specific vector data\r\n  wmsImage: function () {\r\n    var that = this;\r\n    $.ajax({\r\n      url: `${that.baseLayerUrl}/ows?service=WFS&version=1.0.0&request=GetFeature&cql_filter=${that.options.wmsCQL_FILTER[0]}&typeName=${that.options.wmsLayers[0]}&srsName=EPSG:4326&maxFeatures=50&outputFormat=text%2Fjavascript`,\r\n      dataType: \"jsonp\",\r\n      jsonpCallback: \"parseResponse\",\r\n      success: function (data) {\r\n        // bounding box for the selected vector layer\r\n        selectedArea = L.geoJson(data);\r\n        bboxX1 = selectedArea.getBounds()._southWest.lng;\r\n        bboxX2 = selectedArea.getBounds()._northEast.lng;\r\n        bboxY1 = selectedArea.getBounds()._southWest.lat;\r\n        bboxY2 = selectedArea.getBounds()._northEast.lat;\r\n        bboxList = [bboxX1, bboxX2, bboxY1, bboxY2];\r\n        bufferBbox = Math.min((bboxX2 - bboxX1) * 0.1, (bboxY2 - bboxY1) * 0.1);\r\n        maxValue = Math.max(bboxX2 - bboxX1, bboxY2 - bboxY1) / 2.0;\r\n\r\n        var otherLayers = \"\";\r\n        var otherStyle = \"\";\r\n        var otherCqlFilter = \"\";\r\n        for (var i = 1; i < that.options.wmsLayers.length; i++) {\r\n          otherLayers += that.options.wmsLayers[i];\r\n          otherStyle += that.options.wmsStyle[i];\r\n          otherCqlFilter +=that.options.wmsCQL_FILTER[i];\r\n          if (i != that.options.wmsLayers.length - 1) {\r\n            otherLayers += \",\";\r\n            otherStyle += \",\";\r\n            otherCqlFilter += ';';\r\n          }\r\n        }\r\n\r\n        //final wmsLayerUrl\r\n        var wmsLayerURL = `${\r\n          that.baseLayerUrl\r\n        }/wms?service=WMS&version=1.1.0&request=GetMap&\\\r\nlayers=${otherLayers}&\\\r\nstyles=${otherStyle}&\\\r\ncql_filter=${otherCqlFilter}&\\\r\nbbox=${(bboxX1 + bboxX2) * 0.5 - maxValue - bufferBbox},${\r\n          (bboxY1 + bboxY2) * 0.5 - maxValue - bufferBbox\r\n        },${(bboxX1 + bboxX2) * 0.5 + maxValue + bufferBbox},${\r\n          (bboxY1 + bboxY2) * 0.5 + maxValue + bufferBbox\r\n        }&\\\r\nwidth=${that.options.width}&\\\r\nheight=${that.options.height}&\\\r\nsrs=EPSG%3A4326&\\\r\nformat=image/png`;\r\n        $(`#${that.options.wmsId}`).attr(\"src\", wmsLayerURL);\r\n        return that;\r\n      },\r\n    });\r\n    return that;\r\n  },\r\n});\r\n\r\nL.Geoserver.wms = function (baseLayerUrl, options) {\r\n  var req = new L.Geoserver(baseLayerUrl, options);\r\n  return req.wms();\r\n};\r\n\r\nL.Geoserver.wfs = function (baseLayerUrl, options) {\r\n  var req = new L.Geoserver(baseLayerUrl, options);\r\n  return req.wfs();\r\n};\r\n\r\nL.Geoserver.legend = function (baseLayerUrl, options) {\r\n  var req = new L.Geoserver(baseLayerUrl, options);\r\n  return req.legend();\r\n};\r\n\r\nL.Geoserver.wmsImage = function (baseLayerUrl, options) {\r\n  var req = new L.Geoserver(baseLayerUrl, options);\r\n  return req.wmsImage();\r\n};\r\n"]}